trigger:
- master
- release

pr: none

jobs:
- job: Deployment
  timeoutInMinutes: 200
  pool:
    vmImage: 'macos-latest'

  steps:
    - task: JavaToolInstaller@0
      inputs:
        versionSpec: '11'
        jdkArchitectureOption: 'x64'
        jdkSourceOption: 'PreInstalled'
      displayName: 'Installing Java'

  # =================================================================================
  # Download and unzip configuration folder from secure preferences
  # =================================================================================
    - task: DownloadSecureFile@1
      name: config
      inputs:
        secureFile: 'Configuration.zip'
      displayName: 'Downloading Scripts'

    - task: ExtractFiles@1
      inputs:
        archiveFilePatterns: $(config.secureFilePath)
        destinationFolder: $(Build.SourcesDirectory)
        cleanDestinationFolder: false
        overwriteExistingFiles: false
      displayName: 'Extracting Configurations'

  # =================================================================================
  # Copy specific files from configuration directory
  # =================================================================================
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Configuration/env'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)/env'
      displayName: 'Copy ENV variables scripts'


    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Configuration/google'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)/google'
      displayName: 'Copy Google Keys'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Configuration/android'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)/android'
      displayName: 'Copy Android'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Configuration/ios'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)/ios'
        CleanTargetFolder: false
      displayName: 'Copy ios'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Configuration/macos'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)/macos'
        CleanTargetFolder: false
      displayName: 'Copy macos'

    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/Configuration/lib'
        Contents: '**'
        TargetFolder: '$(Build.SourcesDirectory)/lib'
        CleanTargetFolder: false
      displayName: 'Copy Lib Configs'

  # =================================================================================
  # Certificate
  # =================================================================================
    - task: InstallAppleCertificate@2
      inputs:
        certSecureFile: '$(p12FileName)'
        certPwd: '$(p12Password)'
        keychain: 'temp'
        deleteCert: true
      displayName: 'Installing Apple Distribution Certificate'

  # =================================================================================
  # Flutter & Fastlane
  # =================================================================================
    - bash: |
        git clone https://github.com/flutter/flutter.git -b 3.7.5
        export PATH=`pwd`/flutter/bin:$PATH
        # flutter channel stable
        flutter doctor
        # flutter upgrade
      displayName: Configure flutter SDK

    - task: UseRubyVersion@0
      inputs:
        versionSpec: '>= 2.4'
      displayName: 'Installing Ruby'

    - bash: |
        cd android && \
        bundle install && \
        bundle update fastlane 
        # && \
        # cd .. && \
        # cd ios && \
        # bundle install && \
        # bundle update fastlane
      displayName: 'Setup Bundler & Fastlane'

    - bash: |
        export PATH=`pwd`/flutter/bin:$PATH
        cd android && \
        bundle exec fastlane verify
      displayName: 'Validate PR'


  # =================================================================================
  # DAYMEMORY PROD IOS
  # =================================================================================
    # - task: InstallAppleProvisioningProfile@1
    #   inputs:
    #     provisioningProfileLocation: 'secureFiles'
    #     provProfileSecureFile: '$(PROD_PROVISION_PROFILE)'
    #     removeProfile: true
    #   displayName: 'Provisioning DayMemory PROD'

    # - bash: |
    #     export PATH=`pwd`/flutter/bin:$PATH
    #     cd ios && \
    #     bundle exec fastlane build_and_deploy_testflight \
    #     buildNumber:$(Build.BuildId) \
    #     appId:1:312341156050:ios:6ddf4ecacbe8831c635d0b \
    #     flavor:dayMemoryProd \
    #     main:lib/configuration/daymemory_prod.dart
    #   displayName: 'Building DayMemory PROD'
    #   env:
    #     APPLE_USER_EMAIL: $(APPLE_USER_EMAIL)
    #     FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: $(FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD)
    #     APP_STORE_CONNECT_TEAM_ID: $(APP_STORE_CONNECT_TEAM_ID)
    #     DEVELOPER_PORTAL_TEAM_ID: $(DEVELOPER_PORTAL_TEAM_ID)
    #     PROVISION_PROFILE_NAME: $(PROD_PROVISION_NAME)
    #     BUNDLE_IDENTIFIER: "com.daymemory"
    #     APP_APPLE_ID: "1639089867"


  # =================================================================================
  # DAYMEMORY PROD Android
  # =================================================================================
    - bash: |
        export PATH=`pwd`/flutter/bin:$PATH
        cd android && \
        bundle exec fastlane deploy_google_play_internal \
        buildNumber:$(Build.BuildId) \
        flavor:dayMemoryProd \
        main:lib/configuration/daymemory_prod.dart \
        appId:1:312341156050:android:17896d06d3e21ee0635d0b \
        qaGroup:Internal \
        bundlePath:dayMemoryProdRelease/app-dayMemoryProd-release.aab \
        jsonName:google_play_store_daymemory_prod.json \
        packageName:net.daymemory
      displayName: 'Android DayMemory PROD'